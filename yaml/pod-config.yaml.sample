apiVersion: v1
kind: Pod
metadata:
  name: llvm-ci-fedora-32-x8664-pod
  labels:
    app: "llvm-ci"
    os: "fedora"
    os_version: "32"
    arch: "x86_64"
    ccache: "yes"
spec:
  containers:
    - name: llvm-ci-fedora-32-x8664-container
      image: quay.io/kkleine/llvm-ci:fedora-32-x86_64-1c9cac6
      # See https://docs.openshift.com/enterprise/3.2/dev_guide/compute_resources.html#quality-of-service-tiers
      QoS Tier:
        # A Guaranteed CPU container is guaranteed to get the amount requested
        # and no more, even if there are additional CPU cycles available. This
        # provides a consistent level of performance independent of other
        # activity on the node.
        cpu:  "Guaranteed"
        # A Burstable memory container is scheduled on the node to get the
        # amount of memory requested, but it may consume more. If there is an
        # out of memory event on the node, Burstable containers are killed after
        # BestEffort containers when attempting to recover memory.
        memory: "Burstable"
      resources:
        requests:
          # Memory is measured in bytes. In addition, it may be used with SI
          # suffices (E, P, T, G, M, K) or their power-of-two-equivalents
          # (Ei, Pi, Ti, Gi, Mi, Ki).
          memory: "8Gi"
          # CPU is measured in units called millicores. Each node in a cluster
          # inspects the operating system to determine the amount of CPU cores
          # on the node, then multiplies that value by 1000 to express its total
          # capacity. For example, if a node has 2 cores, the nodeâ€™s CPU
          # capacity would be represented as 2000m. If you wanted to use 1/10 of
          # a single core, it would be represented as 100m.
          # (see https://docs.openshift.com/enterprise/3.2/dev_guide/compute_resources.html#dev-compute-resources)
          cpu: "32000m"
        limits:
          memory: "64Gi"
          cpu: "32000m" # 32 cores
      ports:
        - containerPort: 9090
      env:
        # Google builds with these settings:
        # cmake ../llvm -D LLVM_ENABLE_PROJECTS="clang;compiler-rt;llvm" -G Ninja -D CMAKE_BUILD_TYPE=Release -D LLVM_ENABLE_ASSERTIONS=ON -D LLVM_BUILD_EXAMPLES=ON -D LLVM_LIT_ARGS="-v --xunit-xml-output test-results.xml" -D LLVM_ENABLE_LLD=ON -D CMAKE_CXX_FLAGS=-gmlt -D LLVM_CCACHE_BUILD=ON -D LLVM_CCACHE_DIR=/mnt/disks/ssd0/agent/ccache -D LLVM_CCACHE_MAXSIZE=20G
        # See: https://github.com/google/llvm-premerge-checks/blob/dc1080fc4ce21f12a8015090683884c540680f3f/scripts/run_cmake_config.yaml#L5-L9
        - name: CMAKE_BUILD_TYPE
          value: "Release"
        - name: LLVM_ENABLE_ASSERTIONS
          value: "On"
        - name: LLVM_BUILD_EXAMPLES
          value: "On"
        - name: LLVM_LIT_ARGS
          value: -v --xunit-xml-output test-results.xml
        # - name: LLVM_ENABLE_LLD
        #   value: "On" # TODO(kwk): Are we cool with this?
        # - name: CMAKE_CXX_FLAGS
        #   value: -gmlt # TODO(kwk): Are we cool with this?
        - name: LLVM_CCACHE_BUILD
          value: "On"
        - name: LLVM_CCACHE_DIR
          value: "/ccache"
        - name: LLVM_CCACHE_MAXSIZE
          value: "20G"

        - name: LLVM_TARGETS_TO_BUILD
          value: "X86"
        - name: CMAKE_EXPORT_COMPILE_COMMANDS
          value: "1" 

        # To be more close to our build pipeline we build with GCC
        - name: CXX
          value: "g++"
        - name: CC
          value: "gcc"
        - name: LLVM_ENABLE_PROJECTS
          value: "clang;clang-tools-extra;compiler-rt;lld;debuginfo-tests;mlir" # TODO(kwk): re-enable lldb
        # - name: LD
        #   value: "ldd" # TODO(kwk): Are we cool with this?
        #                # This helps us not to allocate too much memory.
        
        - name: LLVM_BUILD_LLVM_DYLIB
          value: "On"
        - name: LLVM_LINK_LLVM_DYLIB  
          value: "On"
        - name: CLANG_LINK_CLANG_DYLIB
          value: "On"
        - name: BUILD_SHARED_LIBS
          value: "Off" # dev-only setting

        - name: BUILDKITE_AGENT_TOKEN
          valueFrom:
            secretKeyRef:
              name: buildkite-agent-token
              key: WebHookSecretKey
      # volumeMounts:
      # - mountPath: /ccache
      #   name: cache-volume
      # - mountPath: /var/lib/buildkite-agent/builds
      #   name: pvol
  # volumes:
  # - name: cache-volume
  #   emptyDir: {}
  # - name: pvol
  #   persistentVolumeClaim:
  #     claimName: llvm-storage-claim