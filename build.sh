#!/bin/bash 

set -x
set -e

export LANG=en_US.UTF-8

python_version=3.7

mkdir -p build

cd build

# Let's begin constructing the main CMake command by using environment variables
# and defaults for each variable. This let's us use one container for multiple
# build pipelines. Neat, eh?

CMD="cmake ../llvm"

# CMake variables

CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX:-$PWD/install-prefix}
CMD="$CMD -DCMAKE_INSTALL_PREFIX=$CMAKE_INSTALL_PREFIX"

GENERATOR=${GENERATOR:-Ninja}
CMD="$CMD -G \"$GENERATOR\""

CMAKE_EXPORT_COMPILE_COMMANDS=${CMAKE_EXPORT_COMPILE_COMMANDS:-1}
CMD="$CMD -DCMAKE_EXPORT_COMPILE_COMMANDS=${CMAKE_EXPORT_COMPILE_COMMANDS}"

# Variables not conforming to LLVM's CMake

# TODO(kwk): If one Sanitizer is used the other may not be enabled.

ENABLE_ASAN=${ENABLE_ASAN:-Off}
[[ "${ENABLE_ASAN}" == "On" ]] && CMD="$CMD -DLLVM_USE_SANITIZER=Address"

ENABLE_TSAN=${ENABLE_TSAN:-Off}
[[ "${ENABLE_TSAN}" == "On" ]] && CMD="$CMD -DLLVM_USE_SANITIZER=Thread"

# Variables conforming to LLVM's CMake

LLVM_TARGETS_TO_BUILD=${LLVM_TARGETS_TO_BUILD:-"All"}
CMD="$CMD -DLLVM_TARGETS_TO_BUILD=${LLVM_TARGETS_TO_BUILD}"

CMAKE_C_COMPILER=${CMAKE_C_COMPILER:-gcc}
CMD="$CMD -DCMAKE_C_COMPILER=$CMAKE_C_COMPILER"

CMAKE_CXX_COMPILER=${CXX:-g++}
CMD="$CMD -DCMAKE_CXX_COMPILER=$CMAKE_CXX_COMPILER"

DCMAKE_BUILD_TYPE=${DCMAKE_BUILD_TYPE:-RelWithDebInfo}
CMD="$CMD -DCMAKE_BUILD_TYPE=$DCMAKE_BUILD_TYPE"

LLVM_ENABLE_PROJECTS=${LLVM_ENABLE_PROJECTS:-lldb;clang;clang-tools-extra;lld;debuginfo-tests}
CMD="$CMD -DLLVM_ENABLE_PROJECTS=\"${LLVM_ENABLE_PROJECTS}\""

LLVM_USE_SPLIT_DWARF=${LLVM_USE_SPLIT_DWARF:-On}
CMD="$CMD -DLLVM_USE_SPLIT_DWARF=${LLVM_USE_SPLIT_DWARF}"

LLVM_ENABLE_ASSERTIONS=${LLVM_ENABLE_ASSERTIONS:-On}
CMD="$CMD -DLLVM_ENABLE_ASSERTIONS=${LLVM_ENABLE_ASSERTIONS}"

LLVM_USE_SPLIT_DWARF=${LLVM_USE_SPLIT_DWARF:-On}
CMD="$CMD -DLLVM_USE_SPLIT_DWARF=${LLVM_USE_SPLIT_DWARF}"

LLVM_PARALLEL_LINK_JOBS=${LLVM_PARALLEL_LINK_JOBS:-2}
CMD="$CMD -DLLVM_PARALLEL_LINK_JOBS=${LLVM_PARALLEL_LINK_JOBS}"

LLVM_PARALLEL_COMPILE_JOBS=${LLVM_PARALLEL_COMPILE_JOBS:-$(nproc)}
CMD="$CMD -DLLVM_PARALLEL_COMPILE_JOBS=${LLVM_PARALLEL_COMPILE_JOBS}"

LLVM_ENABLE_LTO=${LLVM_ENABLE_LTO:-Off}
CMD="$CMD -DLLVM_ENABLE_LTO=${LLVM_ENABLE_LTO}"

LLVM_ENABLE_RTTI=${LLVM_ENABLE_RTTI:-Off}
CMD="$CMD -DLLVM_ENABLE_RTTI=${LLVM_ENABLE_RTTI}"

LLVM_BUILD_TESTS=${LLVM_BUILD_TESTS:-Off}
CMD="$CMD -DLLVM_BUILD_TESTS=${LLVM_BUILD_TESTS}"

LLVM_BUILD_EXAMPLES=${LLVM_BUILD_EXAMPLES:-Off}
CMD="$CMD -DLLVM_BUILD_EXAMPLES=${LLVM_BUILD_EXAMPLES}"

LLVM_CCACHE_BUILD=${LLVM_CCACHE_BUILD:-On}
CMD="$CMD -DLLVM_CCACHE_BUILD=${LLVM_CCACHE_BUILD}"

LLVM_LIT_ARGS=${LLVM_LIT_ARGS:-"-sv -j 1"}
CMD="$CMD -DLLVM_LIT_ARGS=${LLVM_LIT_ARGS}"

LLVM_BUILD_INSTRUMENTED_COVERAGE=${LLVM_BUILD_INSTRUMENTED_COVERAGE:-Off}
CMD="$CMD -DLLVM_BUILD_INSTRUMENTED_COVERAGE=${LLVM_BUILD_INSTRUMENTED_COVERAGE}"

BUILD_SHARED_LIBS=${BUILD_SHARED_LIBS:-On}
CMD="$CMD -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}"

LLDB_EXPORT_ALL_SYMBOLS=${LLDB_EXPORT_ALL_SYMBOLS:-1}
CMD="$CMD -DLLDB_EXPORT_ALL_SYMBOLS=${LLDB_EXPORT_ALL_SYMBOLS}"

eval $CMD

# Build all configured projects (see LLVM_ENABLE_PROJECTS above)
cmake --build . --config RelWithDebInfo --target all -- -j $(nproc)

# See https://llvm.org/docs/CMake.html#executing-the-tests
cmake --build . --config RelWithDebInfo --target check-all -- -j $(nproc)